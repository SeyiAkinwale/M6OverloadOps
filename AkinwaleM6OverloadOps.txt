//Specification for the Weight class  

#ifndef M6WEIGHT_H
#define M6WEIGHT_H

#include<iostream>
#include<string>
using namespace std;

//Weight class declaration
class Weight {
	friend ostream& operator<< (ostream&, const Weight&);
	friend istream& operator>> (istream&, Weight&);

	private:
		static int objectCount;
		int pound;
		double ounce;
		//Helper function
		void fixWeight();

	public:
		Weight();
		Weight(int, double);
		Weight(double);
		~Weight(); //destructor

		int getPounds();
		double getOunces();
		double getWeight(); //total weight in ounces
		void setPounds(int);
		void setOunces(double);
		void setWeight(int, double);
		static int getObjectCount();

		//Overloaded operators
		Weight operator+ (const Weight&) const;
		Weight operator- (const Weight&) const;

		//Overload (double) --> covert user-defined to native data type
		operator double() const;
};

#endif

//Implementation file for the M6Weight class
#include "M6Weight.h"
#include <iostream>
#include <cmath>
using namespace std;

int Weight::objectCount = 0; //Definition and initialization
const int OZ_IN_LB  = 16; // ounces in a pound
const double KG_IN_OZ = .0283495; //kilos in an ounce

//Default Constructor initializes weight/ounce
Weight::Weight()
{
	pound = 0;
	ounce = 0; 
	objectCount++;
}

//Constructor with two arguments
Weight::Weight(int lbs, double oz):pound(lbs), ounce(oz)
{
	fixWeight();
	objectCount++;
}

Weight::Weight(double totOunces)
{
	pound = 0; ounce = totOunces;
	fixWeight();
}

Weight::~Weight()
{
	objectCount--;
}

// returns value of pound
int Weight::getPounds()
{
	return pound;
}

//returns value of ounce
double Weight::getOunces()
{
	return ounce;
}

//sum of pound variable in ounces and ounce
double Weight::getWeight()
{
	return pound * OZ_IN_LB + ounce;
	//cout << "Number of objects: " << Weight::getObjectCount();
}

Weight Weight::operator+ (const Weight& other) const
{
	Weight temp;
	temp.pound = other.pound + pound;
	temp.ounce = other.ounce + ounce;
	temp.fixWeight();
	return temp;
}

Weight Weight::operator- (const Weight& other) const
{
	Weight temp;
	temp.pound = other.pound - pound;
	temp.ounce = other.ounce - ounce;
	temp.fixWeight();
	return temp;
}
void Weight::setPounds(int lbs)
{
	pound = lbs;
	fixWeight();
}

void Weight::setOunces(double oz)
{
	ounce = oz;
	fixWeight();
}

void Weight::setWeight(int lbs, double oz)
{
	pound = lbs;
	ounce = oz;
	fixWeight();
}

//Helper function to fix Weight
void Weight::fixWeight()
{	//If they are negative, convert them to positive
	pound = abs(pound);
	ounce = abs(ounce);

	//subtract multiples of 16 oz and covert back onto lbs.
	while (ounce > OZ_IN_LB)
	{
		ounce -= OZ_IN_LB;
		pound++;
	}
}

int Weight::getObjectCount()
{
	return objectCount;
}

//Overloading <<
ostream& operator<< (ostream& out, const Weight& aWeight)
{
	out << aWeight.pound << " lbs " << aWeight.ounce<< "ozs";
	return out;
}

istream& operator>> (istream& in, Weight& aWeight)
{
	in >> aWeight.pound;
	cin.ignore();
	in >> aWeight.ounce;
	return in;
}

Weight::operator double() const
{
	return (pound * OZ_IN_LB + ounce) * KG_IN_OZ;
}


//Author: Seyi Akinwale
//Purpose: Using a class to represent overload operators
//Oct 14, 2022

#include <iostream>
#include <string>
#include <cmath>
#include "M6Weight.h"

using namespace std;

void testTypeOverload();
void testStreamOverload();

int main()
{

	testTypeOverload();
	cout << endl<< "Number of objects: " << Weight::getObjectCount();
	return 0;
}

void testTypeOverload()
{
	Weight middleWeight(4, 6.4);
	double convertedWeight = middleWeight;
	cout << endl << convertedWeight;
	Weight funWeight = convertedWeight;
	cout << "Fun Weight" << funWeight;
}
void testStreamOverload()
{
	Weight leftWeight;

	Weight middleWeight(2, 2);
	
	cout << "\nEnter a Weight: ";
	cin >> middleWeight;

	Weight rightWeight(200, 12);
	rightWeight.setPounds(-10);
	rightWeight.setOunces(100.5);

	leftWeight = middleWeight - rightWeight;
	cout << endl << leftWeight.getPounds();
	cout << " " << leftWeight.getOunces();
	cout << endl << rightWeight.getPounds();
	cout << " " << rightWeight.getOunces();
	cout << endl << rightWeight.getWeight();
	cout << endl << rightWeight;
}

